// // <copyright file="TaskKillerLiteSettings.cs" company="PublicDomain.com">
// //     CC0 1.0 Universal (CC0 1.0) - Public Domain Dedication
// //     https://creativecommons.org/publicdomain/zero/1.0/legalcode
// // </copyright>
// // <auto-generated />
namespace TaskKillerLite
{
    // Directives
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Drawing;
    using System.Windows.Forms;

    /// <summary>
    /// Description of MainForm.
    /// </summary>
    public partial class MainForm : Form
    {
        // The process exclusion list
        List<string> processExclusionList = new List<string>() { "conhost", "dwm", "explorer", "rundll32", "taskhost" };

        /// <summary>
        /// Initializes a new instance of the <see cref="T:TaskKillerLite.MainForm"/> class.
        /// </summary>
        public MainForm()
        {
            // The InitializeComponent() call is required for Windows Forms designer support.
            this.InitializeComponent();

            // Set initial proces list
            this.SetProcessList();
        }

        /// <summary>
        /// Handles the new tool strip menu item click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnNewToolStripMenuItemClick(object sender, EventArgs e)
        {
            // TODO Add code
        }

        /// <summary>
        /// Handles the exit tool strip menu item1 click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnExitToolStripMenuItem1Click(object sender, EventArgs e)
        {
            // Close program
            this.Close();
        }

        /// <summary>
        /// Handles the options tool strip menu item drop down item clicked event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnOptionsToolStripMenuItemDropDownItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            // Set tool strip menu item
            ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem)e.ClickedItem;

            // Toggle checked
            toolStripMenuItem.Checked = !toolStripMenuItem.Checked;

            // Set topmost by check box
            this.TopMost = this.alwaysOnTopToolStripMenuItem.Checked;
        }

        /// <summary>
        /// Handles the daily releases public domain dailycom tool strip menu item click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnWeeklyReleasesPublicDomainWeeklycomToolStripMenuItemClick(object sender, EventArgs e)
        {
            // Open weekly releases website
            Process.Start("https://publicdomainweekly.com");
        }

        /// <summary>
        /// Handles the original thread donation codercom tool strip menu item click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnOriginalThreadDonationCodercomToolStripMenuItemClick(object sender, EventArgs e)
        {
            // Open original thread
            Process.Start("https://www.donationcoder.com/forum/index.php?topic=49923.0");
        }

        /// <summary>
        /// Handles the source code githubcom tool strip menu item click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnSourceCodeGithubcomToolStripMenuItemClick(object sender, EventArgs e)
        {
            // Open source code repository
            Process.Start("https://github.com/publicdomain/task-killer-lite");
        }

        /// <summary>
        /// Handles the about tool strip menu item click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnAboutToolStripMenuItemClick(object sender, EventArgs e)
        {
            // TODO Add code
        }

        /// <summary>
        /// Sets the process list.
        /// </summary>
        private void SetProcessList()
        {
            // List processes for current user
            foreach (var process in Process.GetProcesses())
            {
                // Test against excluson list
                if (!this.processExclusionList.Contains(process.ProcessName))
                {
                    // Add to process list
                    this.processListView.Items.Add(new ListViewItem(new string[] { process.Id.ToString(), process.ProcessName, process.MainWindowTitle.ToString() }));
                }
            }

            // Update process count
            this.countToolStripStatusLabel.Text = this.processListView.Items.Count.ToString();
        }

        /// <summary>
        /// Closes the process.
        /// </summary>
        private void CloseProcess()
        {
            // Get process from passed ID
            Process process = Process.GetProcessById(Convert.ToInt32(this.processListView.SelectedItems[0].SubItems[0].Text));

            // Check closing manner
            if (this.closeGracefullyCheckBox.Checked)
            {
                // Close gracefully
                process.CloseMainWindow();
            }
            else
            {
                // Kill
                process.Kill();
            }

            // Remove item
            this.processListView.Items.Remove(this.processListView.SelectedItems[0]);

            // Update process count
            this.countToolStripStatusLabel.Text = this.processListView.Items.Count.ToString();
        }

        /// <summary>
        /// Handles the process list view click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnProcessListViewClick(object sender, EventArgs e)
        {
            // Check if must proceed
            if (!this.doubleClickCheckBox.Checked)
            {
                // Close process
                this.CloseProcess();
            }
        }

        /// <summary>
        /// Handles the process list view double click event.
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void OnProcessListViewDoubleClick(object sender, EventArgs e)
        {
            // Check if must proceed
            if (this.doubleClickCheckBox.Checked)
            {
                // Close process
                this.CloseProcess();
            }
        }
    }
}
